"""
Django settings for post project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dsyvj)9&r)w3adubiq-ef*lwobp9z8_tpfwd$*69p1zpceg=_6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
#cac tuy chon khi dang nhap hoac dang ki voi email

 #simple mail transfer protocol: giao thuc truyen thu don gian.
EMAIL_BACKEND= 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_BACKEND= 'django.core.mail.backends.console.EmailBackend'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Cho phép login bằng username hoặc email
#ACCOUNT_EMAIL_REQUIRED = True  # Yêu cầu email cho người dùng khi dang ky tai khoan moi.
'''mandatory: Yêu cầu người dùng xác minh email trước khi có thể đăng nhập.
optional: Xác minh email là tùy chọn, không bắt buộc để đăng nhập.
none: Không yêu cầu xác minh email, và không gửi email xác minh.'''
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Xác minh email có thể không bắt buộc

# Application definition
# các app được đưa vào để triển khai cho django hiểu
INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'a_posts',
    'a_users',
    'a_rtchat',
    #thêm vào để có thể tạo tai khoan người dùng
    'django.contrib.sites',

    'allauth',
    'allauth.account',

    # Optional -- requires install using `django-allauth[socialaccount]`.
    'allauth.socialaccount',
    'django_cleanup.apps.CleanupConfig',
    "django_htmx",
]
#them vao để tạo tài khoản đăng nhập
SITE_ID=1

#giữa các tầng ta xây dựng các middleware để chặn các request lại để xử lí
#kiểm tra trước khi gửi vào bên trong server
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    "django_htmx.middleware.HtmxMiddleware",
]

ROOT_URLCONF = 'post.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#được thêm vào đẻ tạo phần cài đặt tài khoản
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

#
# WSGI_APPLICATION = 'post.wsgi.application'
ASGI_APPLICATION = "post.asgi.application"

'''cài đặt cái này để nhiều người dùng có thể nhận tin nhắn cùng 1 lúc.'''
CHANNEL_LAYERS={
    'default':{
        "BACKEND":"channels.layers.InMemoryChannelLayer",
    }
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'site1',
        'USER' : 'root',
        'PASSWORD': '',
        'HOST':'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
import os
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/')
]
'''Mục đích: MEDIA_URL xác định URL cơ sở (base URL) mà từ đó các tệp tin media sẽ được truy cập trên trình duyệt. Khi bạn thiết lập MEDIA_URL = '/image/', điều này có nghĩa là tất cả các URL liên quan đến tệp tin media sẽ bắt đầu bằng /image/.
Ví dụ sử dụng: Nếu có một tệp tin ảnh tên là photo.jpg được lưu trong thư mục media của bạn, bạn có thể truy cập nó tại URL: http://yourdomain.com/image/photo.jpg.'''
MEDIA_URL = '/image/'
#Đường dẫn vật lý trên máy chủ nơi Django lưu các tệp media được tải lên.
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/image')

#sau khi đăng nhập xong thì nó sẽ chuyển hướng trở về trang chủ.
LOGIN_REDIRECT_URL='login'
SIGNUP_REDIRECT_URL = '/profile/onboarding'
ACCOUNT_USERNAME_BLACKLIST=['admin', 'accounts', 'profile', 'category', 'post']